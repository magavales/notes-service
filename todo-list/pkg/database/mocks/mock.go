// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	model "todo-list/pkg/model"

	gomock "github.com/golang/mock/gomock"
)

// MockAccess is a mock of Access interface.
type MockAccess struct {
	ctrl     *gomock.Controller
	recorder *MockAccessMockRecorder
}

// MockAccessMockRecorder is the mock recorder for MockAccess.
type MockAccessMockRecorder struct {
	mock *MockAccess
}

// NewMockAccess creates a new mock instance.
func NewMockAccess(ctrl *gomock.Controller) *MockAccess {
	mock := &MockAccess{ctrl: ctrl}
	mock.recorder = &MockAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccess) EXPECT() *MockAccessMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockAccess) CreateTask(task model.TaskReq) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockAccessMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockAccess)(nil).CreateTask), task)
}

// DeleteTask mocks base method.
func (m *MockAccess) DeleteTask(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockAccessMockRecorder) DeleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockAccess)(nil).DeleteTask), id)
}

// GetTaskByID mocks base method.
func (m *MockAccess) GetTaskByID(id int64) (model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", id)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockAccessMockRecorder) GetTaskByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockAccess)(nil).GetTaskByID), id)
}

// GetTasks mocks base method.
func (m *MockAccess) GetTasks(limit, offset int) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", limit, offset)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockAccessMockRecorder) GetTasks(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockAccess)(nil).GetTasks), limit, offset)
}

// GetTasksOrderBy mocks base method.
func (m *MockAccess) GetTasksOrderBy(status, sort string, limit, offset int) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksOrderBy", status, sort, limit, offset)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksOrderBy indicates an expected call of GetTasksOrderBy.
func (mr *MockAccessMockRecorder) GetTasksOrderBy(status, sort, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksOrderBy", reflect.TypeOf((*MockAccess)(nil).GetTasksOrderBy), status, sort, limit, offset)
}

// GetTasksWithStatus mocks base method.
func (m *MockAccess) GetTasksWithStatus(status string, limit, offset int) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksWithStatus", status, limit, offset)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksWithStatus indicates an expected call of GetTasksWithStatus.
func (mr *MockAccessMockRecorder) GetTasksWithStatus(status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksWithStatus", reflect.TypeOf((*MockAccess)(nil).GetTasksWithStatus), status, limit, offset)
}

// UpdateTask mocks base method.
func (m *MockAccess) UpdateTask(id int64, task model.TaskReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", id, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockAccessMockRecorder) UpdateTask(id, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockAccess)(nil).UpdateTask), id, task)
}
